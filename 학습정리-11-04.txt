제네릭
	폴리몰피즘에서 발생할 수있는 문제점을 예방할 수 있는 것

제네릭을 왜쓰느냐하면

	미리 데이터 타입을 정해서 형변환이 없다.


1. Generic 메소드에 대하여 설명하시오.

	제네릭 메소드는 클래스 전부가 아닌

	메소드 하나에 대해 제네릭으로 정의한것이다.


	public static <T> Box<T> makeBox(T o) {

	}

	<T> : 객체 데이터 타입

	Box<T> : 그냥 리턴타입

	makeBox(T o) : T는 객체 데이터 타입을 받음




2.Generic(제네릭) 클래스의 타입 인자 제한하는 방법과 효과는?


제한방법
	- 제네릭 클래스에 상속을 한다.
	- class Integer extends Number
	- 제네릭에서는 인터페이스도 extends로 상속받는다.

효과
	- extends Number를 상속하면
	- Number 클래스를 상속한 클래스(객체)만 올수가 있다.
	- 즉, Integer나 Double만 올수가 있다.
	- 제한하는 이유는 해당 상속받은 클래스의 함수를 써먹겠다는 이유

EX) 

class DBox<T extends Number> {

T extends Number는 넘버를 상속받은 거만 올수 가 있다.
즉, Integer나 Double

Number를 상속 받는 클래스만 타입으로 할수가있다.

제한하는 이유는 해당 상속받은 클래스의 함수를 써먹겠다는 이유

제네릭에서는 extends로 인터페이스도 상속받음



3.와일드 카드란?

	- <?> : 모든 타입을 받아낼수 있다.
	- 기존의 <T>를 써서 데이터타입을 명시하여 명시된 데이터타입으로만 쓴 반면,
	- 와일드 카드 <?> 써서 모든 타입을 받아내어 쓸 수가 있다.


EX)

	// 제네릭 메소드의 정의
	public static <T> void peekBox(Box<T> box) {
		System.out.println(box);
	}

	// 와일드카드 기반 메소드 정의
	public static void peekBox(Box<?> box) {
		System.out.println(box);
	} 

	// 와일드 카드는 제네릭 메소드에 비해 간결하다.


4. 아래가 에러나는 이유를 설명하시오.
class Box<T> {
    private T ob;     
    public void set(T o) { ob = o; }
    public get() { return ob; }
}

...

public static void inBox(Box<? super Toy> box, Toy n) {
   box.set(n);   // 넣는 것! OK!
   Toy myToy = box.get();   // 꺼내는 것! Error!
}




Toy 위의 클래스를 상속받는 하한 제한하였는데

즉, <? 안에는 Toy 위의 클래스만 받을수가 있다.

그러나 소스상으로는 

Toy 자기 자신을 객체화 하여 함수를 호출하여 에러가 난다.




5. 아래의 소스코드 중에 System.out.println(zBox.get().get().get()); 부분을 설명하시오.


class Box<T> {
	private T ob;
	
	public void set(T o) {
		ob = o;
	}

	public T get() {
		return ob;
	}
}

public class BoxInBox {

	public static void main(String[] args) {
		Box<String> sBox = new Box<>();
		sBox.set("I am so happy.");
	
		Box<Box<String>> wBox = new Box<>();
		wBox.set(sBox);
		
		Box<Box<Box<String>>> zBox = new Box<>();
		zBox.set(wBox);
		
		System.out.println(zBox.get().get().get());
	}
}

System.out.println(zBox.get().get().get());

zBox.get() - zBox 안에 가지고 있는 것을 꺼낸다. = wBox

.get() -  wBox 안에는 다시 sBox를 가지고 있다 = sBox

.get() - sBox는 "I am so happy."를 가지고 있다 = "I am so happy."


출력값
I am so happy.



6. 아래를 컴파일 에러가 나지 않게끔 프로그래밍 하시오.


    public static void main(String[] args) {
        Box7<Integer> box1 = new Box7<>();
        box1.set(99);

        Box7<Integer> box2 = new Box7<>();
        box2.set(55);

        System.out.println(box1.get() + " & " + box2.get());
        swapBox(box1, box2); 
        System.out.println(box1.get() + " & " + box2.get());
    }

출력 =========================================

99 & 55
55 & 99



class Box7<T1> {
	private T1 ob1;

	public T1 get() {
		return ob1;
	}

	public void set(T1 o) {
		ob1 = o;
	}
}



public class ExTest3 {
	public static void main(String[] args) {

		Box7<Integer> box1 = new Box7<>();
        		box1.set(99);

        		Box7<Integer> box2 = new Box7<>();
        		box2.set(55);

        		System.out.println(box1.get() + " & " + box2.get());
        		swapBox(box1, box2); 
        		System.out.println(box1.get() + " & " + box2.get());

	}

	private static <T> void swapBox(Box7<T> box1, Box7<T> box2) {
		
		// 스왑 알고리즘
		T temp = box1.get();
		box1.set(box2.get());
		box2.set(temp);
	}

}



7. Scanner를 이용하여 한 라인을 읽고, 공백으로 분리된 어절이 몇 개 들어 있는지 "그만"을 입력할 때까지 반복하는 프로그램을 작성하라.

>>I love Java.
어절 개수는 3
>>자바는 객체 지향 언어로서 매우 좋은 언어이다.
어절 개수는 7
>>그만
종료합니다...
[Hint] Scanner.nextLine()을 이용하면 빈칸을 포함하여 한 번에 한 줄을 읽을 수 있다.

(1) StringTokenizer 클래스를 이용하여 작성하라.




public class ExTest7 {
	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		
		try {
			while (true) {

				String str = sc.nextLine();

				StringTokenizer st1 = new StringTokenizer(str, " ");

				System.out.println("어절 개수는 " + st1.countTokens());

				if (str.equals("그만")) {
					System.out.println("종료합니다...");
					break;
				}
			}
		} catch (Exception e) {
			System.out.println("잘못된 입력입니다.");
		}

	
	}
}



