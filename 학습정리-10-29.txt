1. Object클래스의 11개 함수를 나열해 보시오.
그중 우리가 외워야 할 함수들은 찍어 보세요 ㅎㅎ

	1. getClass(),   
	2. hashCode(),   
	3. equals(Object obj),
	4. clone(),   
	5. toString(),   
	6. notify()
	7. notifyAll()  
	8. wait()   
	9. wait(long timeoutMillis)   
	10. wait(long timeoutMillis, int nanos)  
	11. finalize()

 그중 많이 쓰이는 함수는
	3. equals(Object obj), 
	5. toString()

2. equals 함수에 대하여 설명하시오.
	- equals 함수는 Object 클래스의 메소드이다.
	- 인스턴스의 내용비교를 위한 기능
	- equals 함수는 원래 주소값만 비교
	- 주소값이 같다 = true
	- 주소값이 다르다 = false

3. String 클래스 에서 문자열 비교시 equals를 쓰는 이유는?
	- String 클래스는 내용비교를 하는 형태로 내부적으로 오버라이딩 하고있음.
	- String에서의 비교는 내부적으로 문자열 비교를 하도록 함수 오버라이딩을 했을뿐임!!!

4. shallow copy, deep copy 의 차이는?

	Shallow Copy : 얕은 카피

	- 클론은 매개함수만 복사가 된다. (Point의 주소가 있는 영역 까지만 복사됨!)
	- 즉 point의 주소안의 값은 복사를 안해서 값이 따라간다.
	- Point의 주소의 값까지 복사하고 싶을때에는 딥 카피를 쓴다.

	Deep Copy

	- Rectangle1 처럼 참조형이 왔을때 딥 카피가 필요하다.
	- 해당 클래스가 데이터멤버가 참조형을 받을땐 딥 카피가 필요하다.
	- 딥카피는 참조변수 안에 있는 값까지 영역을 복사해줘야한다.
	

5. 금일 배운 Rectangle의 shall copy 와 deep copy 일 때의 메모리 그림을 그려보시오.
			
				 shall copy


		org =======>        upperLeft    ------------>	   xPos
				    lowerRight     ↘       ↗     yPos
						   ↘  
					           ↗    ↘
		cpy =======>   	     upperLeft  ↗	         ↘   xPos
				     lowerRight   ------------>  yPos


================================================================

				deep copy


		org =======>         upperLeft    =======>	  xPos
				     lowerRight   =======>  yPos
						    
					               
		cpy =======>   	     upperLeft    =======>	   xPos
				     lowerRight   =======>   yPos




6. 아래를 프로그래밍 하시오. (상속)
- 클래스 Person
* 필드 : 이름, 나이, 주소 선언
- 클래스 Student
* 필드 : 학교명, 학과, 학번, 8개 평균평점을 저장할 배열로 선언
* 생성자 : 학교명, 학과, 학번 지정
* 메소드 average() : 8개 학기 평균평점의 평균을 반환
- 클래스 Person과 Student 
- 프로그램 테스트 프로그램의 결과 : 8개 학기의 평균평점은 표준입력으로 받도록한다.

이름 : 김다정
나이 : 20

주소 : 서울시 관악구
학교 : 동양서울대학교
학과 : 전산정보학과
학번 : 20132222
----------------------------------------

8학기 학점을 순서대로 입력하세요

1학기 학점  → 3.37
2학기 학점  → 3.89
3학기 학점  → 4.35
4학기 학점  → 3.76
5학기 학점  → 3.89
6학기 학점  → 4.26
7학기 학점  → 4.89
8학기 학점  → 3.89

----------------------------------------

8학기 총 평균 평점은 4.0375점입니다.




==================================================

import java.util.Scanner;

/*
 * 
 * - 클래스 Person
* 	필드 : 이름, 나이, 주소 선언
- 	클래스 Student
* 	필드 : 학교명, 학과, 학번, 8개 평균평점을 저장할 배열로 선언
* 	생성자 : 학교명, 학과, 학번 지정
* 	메소드 average() : 8개 학기 평균평점의 평균을 반환
- 	클래스 Person과 Student 
- 	프로그램 테스트 프로그램의 결과 : 8개 학기의 평균평점은 표준입력으로 받도록한다.

	이름 : 김다정
	나이 : 20
	
	주소 : 서울시 관악구
	학교 : 동양서울대학교
	학과 : 전산정보학과
	학번 : 20132222
 */

class Person {
	private String name, adress;
	private int age;
	
	Person(String name, String adress, int age) {
		this.name = name;
		this.adress = adress;
		this.age = age;
	}

	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAdress() {
		return adress;
	}
	public void setAdress(String adress) {
		this.adress = adress;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	
	public void print() {
		System.out.println("이름" + name);
		System.out.println("나이" + age);
		System.out.println("주소" + adress);
	}

}

class Student extends Person {
	private String sch_name, major;
	private int stu_num;
	private double[] avgsum = new double[8];
	

	public String getSch_name() {
		return sch_name;
	}

	public void setSch_name(String sch_name) {
		this.sch_name = sch_name;
	}

	public String getMajor() {
		return major;
	}

	public void setMajor(String major) {
		this.major = major;
	}

	public int getStu_num() {
		return stu_num;
	}

	public void setStu_num(int stu_num) {
		this.stu_num = stu_num;
	}
	
	public double[] getAvgsum() {
		return avgsum;
	}

	public void setAvgsum(double[] avgsum) {
		this.avgsum = avgsum;
	}
	
	public void setAvgsum() {
		
		try {

			Scanner sc = new Scanner(System.in);

			System.out.println("8학기 학점을 순서대로 입력하세요");

			for (int i = 0; i < avgsum.length; i++) {
				System.out.println((i + 1) + "학기 학점 -> ");
				avgsum[i] = sc.nextDouble();
			}
		} catch (Exception e) {
			System.out.println("잘못된 입력입니다.");
			setAvgsum(); // 자기 자신을 다시 호출. 재귀 함수
		}
	}


	public Student(String name, String adress, int age, String sch_name, String major, int stu_num) {
		super(sch_name, adress, age);
		
		this.sch_name = sch_name;
		this.major = major;
		this.stu_num = stu_num;
	}
	
	@Override
	public void print() {
		System.out.println("학교" + sch_name);
		System.out.println("학과" + major);
		System.out.println("학번" + stu_num);
	}

	public double average() {
		double sum = 0;
		double avg = 0;
		
		for (double d : avgsum) {
			sum += d;
		}
		avg = sum / avgsum.length;
		
		return avg;
	}
}

public class ExTest6 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Student st1 = new Student("김다정", "서울시 대치동", 20, "한국대학교", "전산학과", 210098);
		
		st1.print();
		
		st1.setAvgsum();
		
		System.out.println("8학기 총 평균 평점은" + st1.average() + "점입니다.");
		
		
	}
}









7.철수 학생은 다음 3개의 필드와 메소드를 가진 4개의 클래스 Add, Sub, Mul, Div를 작성하려고 한다.
(추상 클래스로)

- int 타입의 a, b 필드: 2개의 피연산자
- void setValue(int a, int b): 피연산자 값을 객체 내에 저장한다.
- int calculate(): 클래스의 목적에 맞는 연산을 실행하고 결과를 리턴한다.

곰곰 생각해보니, Add, Sub, Mul, Div 클래스에 공통된 필드와 메소드가 존재하므로 새로운 추상 클래스 Calc를 작성하고,
 Calc를 상속받아 만들면 되겠다고 생각했다. 
그리고 main() 메소드에서 다음 실행 사례와 같이 2개의 정수와 연산자를 입력받은 후, 
Add, Sub, Mul, Div 중에서 이 연산을 처리할 수 있는 객체를 생성하고 setValue() 와 calculate()를 호출하여 
그 결과 값을 화면에 출력하면 된다고 생각하였다. 

철수처럼 프로그램을 작성하라.(예외처리 구문도 넣어 주세요^^)

두 정수와 연산자를 입력하시오 >> 5 7 +





=======================================================

import java.util.Scanner;

/*
 * 7.철수 학생은 다음 3개의 필드와 메소드를 가진 4개의 클래스 Add, Sub, Mul, Div를 작성하려고 한다.
	(추상 클래스로)
	
	- int 타입의 a, b 필드: 2개의 피연산자
	- void setValue(int a, int b): 피연산자 값을 객체 내에 저장한다.
	- int calculate(): 클래스의 목적에 맞는 연산을 실행하고 결과를 리턴한다.
	
	곰곰 생각해보니, Add, Sub, Mul, Div 클래스에 공통된 필드와 메소드가 존재하므로 새로운 추상 클래스 Calc를 작성하고,
	 Calc를 상속받아 만들면 되겠다고 생각했다. 
	그리고 main() 메소드에서 다음 실행 사례와 같이 2개의 정수와 연산자를 입력받은 후, 
	Add, Sub, Mul, Div 중에서 이 연산을 처리할 수 있는 객체를 생성하고 setValue() 와 calculate()를 호출하여 
	그 결과 값을 화면에 출력하면 된다고 생각하였다. 
	
	철수처럼 프로그램을 작성하라.(예외처리 구문도 넣어 주세요^^)
	
	두 정수와 연산자를 입력하시오 >> 5 7 +
 */


abstract class Calc {
	protected int a;
	protected int b;
	
	void setValue(int a, int b) {
		this.a = a;
		this.b = b;
	}
	
	abstract int calculate();
}

class Add extends Calc {
	
	@Override
	int calculate() {
		return a+b;
	}
	
}

class Sub extends Calc {
	
	@Override
	int calculate() {
		return a-b;
	}
	
}

class Mul extends Calc {
	
	@Override
	int calculate() {
		return a*b;
	}
	
}

class Div extends Calc {
	
	@Override
	int calculate() {
		return a/b;
	}
	
}



public class ExTest7 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc = new Scanner(System.in);
		
		System.out.print("두 정수와 연산자를 입력하시오 >>");

		int a = sc.nextInt();
		int b = sc.nextInt();
		String op = sc.next();
		
		Calc cal = null;
		switch (op) {
		case "+":
			cal = new Add();
			break;
			
		case "-":
			cal = new Sub();
			break;
			
		case "*":
			cal = new Mul();
			break;
			
		case "/":
			cal = new Div();
			break;

		default:
			System.out.println("잘못된 연산자 입니다.");
			break;
		}
		cal.setValue(a, b);
		System.out.println(cal.calculate());

	}

}







8. 문자열을 입력 받아 한 글자씩 회전시켜 모두 출력하는 프로그램을 작성하라.
(클래스로 작성할 필요없이 메인에서 직접 할것)
[Hint] Scanner.nextLine()을 이용하면 빈칸을 포함하여 한 번에 한 줄을 읽을 수 있다.
문자열을 입력하세요. 빈칸이나 있어도 되고 영어 한글 모두 됩니다.

I Love you
Love youI
Love youI
ove youI L
ve youI Lo
e youI Lov
youI Love
youI Love
ouI Love y
uI Love yo
I Love you
```









==================================================================


import java.util.Scanner;

/*
 * 8. 문자열을 입력 받아 한 글자씩 회전시켜 모두 출력하는 프로그램을 작성하라.
	(클래스로 작성할 필요없이 메인에서 직접 할것)
	[Hint] Scanner.nextLine()을 이용하면 빈칸을 포함하여 한 번에 한 줄을 읽을 수 있다.
	문자열을 입력하세요. 빈칸이나 있어도 되고 영어 한글 모두 됩니다.
 */
public class ExTest8 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		System.out.println("문자열을 입력하세요. 빈칸이나 있어도 되고 영어 한글 모두 됩니다.");
		String input = sc.nextLine();
		
		for(int i = 0; i <= input.length(); i++) {
			System.out.print(input.substring(i));
			System.out.println(input.substring(0, i));
		}


	}

}
