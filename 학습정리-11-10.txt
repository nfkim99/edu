1.아래를 프로그래밍 하시오.

하나의 학생 정보를 나타내는 Student 클래스에는 이름, 학과, 학번, 학점 평균을 저장하는 필드가 있다.

### 문제_01

학생마다 Student 객체를 생성하고 4명의 학생 정보를 `ArrayList<Student> 컬렉션`에 저장한 후에, 
ArrayList<Student>의 모든 학생(4명) 정보를 출력하고 학생 이름을 입력 받아 해당 학생의 학점 평균을 출력하는 프로그램을 작성하라.


### 문제_02

ArayList<Student> 대신, `HashMap<String, Studnet>` **해시맵을 이용하여 다시 작성**하라. 해시맵에서 키는 학생 이름으로 한다.




class Student2 {
	private String name;
	private String dept;
	private String stuNum;
	private double avg;

	public String getDept() {
		return dept;
	}

	public void setDept(String dept) {
		this.dept = dept;
	}

	public String getStuNum() {
		return stuNum;
	}

	public void setStuNum(String stuNum) {
		this.stuNum = stuNum;
	}

	public Student2(String name, String dept, String stuNum, double avg) {
		this.name = name;
		this.dept = dept;
		this.stuNum = stuNum;
		this.avg = avg;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "이름: " + getName() + '\n' + "학과: " + getDept() + '\n' + "학번: " + getStuNum() + '\n' + "학점 평균: "
				+ getAvg() + '\n';
	}

	public double getAvg() {
		return avg;
	}

	public void setAvg(double avg) {
		this.avg = avg;
	}

}

//ArayList<Student> 대신, 
//`HashMap<String, Studnet>` 
//해시맵을 이용하여 다시 작성**하라. 해시맵에서 키는 학생 이름으로 한다.

class exTest1 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		final  int STUDENT_NUM = 2;
		 
		HashMap<String, Student2> arrStu = new HashMap<>();

		System.out.println("학생 이믈, 학과, 학번, 학점 평균을 순서대로 입력하세요.");

		for (int i = 0; i < STUDENT_NUM; i++) {
			System.out.print((i + 1) + "번 >> ");
			String stuInfo = sc.nextLine();

			StringTokenizer st = new StringTokenizer(stuInfo, ",");
			String name = st.nextToken().trim();
			String major = st.nextToken().trim();
			String sNumber = st.nextToken().trim();
			double grade = Double.parseDouble(st.nextToken().trim());
			
			Student2 student = new Student2(name, major, sNumber, grade);
			arrStu.put(sNumber,student);
		}
		
		Set<String> key = arrStu.keySet();

		Iterator<String> it = key.iterator(); // Set을 순차검색하는 이터레이터 리턴
        
		while (it.hasNext()) {
           String sNum = it.next();
           Student2 student = arrStu.get(sNum); 
           
           System.out.println("---------------------------");
           System.out.println("이름:" + student.getName());
           System.out.println("학과:" + student.getDept());
           System.out.println("학번:" + student.getStuNum());
           System.out.println("학점평균:" + student.getAvg());
           System.out.println("---------------------------");
        }

		while (true) {
			System.out.print("학생번호 (종료를 원하시면 '종료'를 입력하세요.) >> ");
			String stuName = sc.next();
					
			if (stuName.equals("종료"))
				break;
			
			Student2 student = arrStu.get(stuName); 
			
			   System.out.println("---------------------------");
	           System.out.println("이름:" + student.getName());
	           System.out.println("학과:" + student.getDept());
	           System.out.println("학번:" + student.getStuNum());
	           System.out.println("학점평균:" + student.getAvg());
	           System.out.println("---------------------------");

		} // while(name)
	}
}




2.. 다음을 프로그래밍 하시오. 

"그만"이 입력될 때까지 나라 이름과 인구를 입력 받아 저장하고, 다시 나라 이름을 입력받아 인구를 출력하는 프로그램을 작성하라. 
다음 해시맵을 이용하라.
=================================================================================
나라 이름과 인구를 입력하세요.(예: Korea 5000)
나라 이름, 인구 >> Korea 5000
나라 이름, 인구 >> USA 1000000
나라 이름, 인구 >> Swiss 2000
나라 이름, 인구 >> France 3000
나라 이름, 인구 >> 그만

인구 검색 >> France
France의 인구는 3000
인구 검색 >> 스위스
스위스 나라는 없습니다.
인구 검색 >> 그만




3. 스택과 큐에 대하여 설명하시오.

스택
 - 벽돌 쌓는거
 - LIFO(last-in-first-out)
	-> 먼저 저장된 데이터가 마지막에 빠져나간다.
	-> 함수는 jvm에서 call stack에 쌓인다.

큐
 - FIFO(first-in-first-out)
	-> 먼저 저장된 데이터가 먼저 빠져나감
		- 큐는 한방향
		- 덱(Deque)은 양방향

4. Map 에 대하여 설명하시오.
	- 자바에서 맵은 Key-value 방식으로 들어간다. (키에 해당하는 값)
	- 내부적으로 map은 set으로 관리(Key)
	- 그래서 중복이 없으며, 순서는 안맞는다.
	- Map은 컬렉션을 상속안받아 따로 함수를 관리한다.






5.아래의 TreeMap의 전체 Value 값을 확인 하기 위한 소스를 짜시오. 

TreeMap<Integer, String> map = new TreeMap<>();
map.put(45, "Brown");
map.put(37, "James");
map.put(23, "Martin");



class MapTest2 {
	
    public static void main(String[] args) {
       TreeMap<Integer, String> map = new TreeMap<Integer, String>();
       
       map.put(45, "Brown");
       map.put(37, "James");
       map.put(23, "Martin");
       
       // Key만 담고 있는 컬렉션 인스턴스 생성 이게 중요
       Set<Integer> ks = map.keySet();
       
       // 전체 Key 출력 (for-each문 기반)
       for(Integer n : ks) {
    	   System.out.print(n.toString() + "\t");
       }
       System.out.println();
       
       // 전체 Value 출력 (for-each문 기반)
       for(Integer n : ks) {
    	   System.out.print(map.get(n).toString() + "\t");
       }
       System.out.println();
       
       // 전체 Value 출력 (반복자 기반)
       for(Iterator<Integer> itr = ks.iterator(); itr.hasNext(); ) {
    	   System.out.print(map.get(itr.next()) + "\t");
       }
       System.out.println();
       
    }
}


6.아래의 IntegerComparator를 내림차순 정렬이 되게끔 구현하시오.
public static void main(String[] args) {
        TreeSet<Integer> tr = new TreeSet<>(new IntegerComparator());
        tr.add(30);
        tr.add(10);    
        tr.add(20);        
        System.out.println(tr);	
    }
}


====================================================================

class IntegerComparator implements Comparator<Integer> { // 암기!! Comparator 임플리먼츠 하기!
	
	@Override
	public int compare(Integer num1, Integer num2) {
		return num2 - num1;
	}
}

내일 아침 53번, 32번 함!


