1. 아래의 결과 값은 false 출력이 된다. true 가 되도록 INum을짜시오.

  INum[] ar1 = new INum[3];
  INum[] ar2 = new INum[3];

  ar1[0] = new INum(1); ar2[0] = new INum(1);
  ar1[1] = new INum(2); ar2[1] = new INum(2);
  ar1[2] = new INum(3); ar2[2] = new INum(3);

  System.out.println(Arrays.equals(ar1, ar2));


=============================================

class INum {
	private int num;
	
	INum(int num) {
		this.num = num;
	}
	
	@Override
	public boolean equals(Object obj) {
		INum p1 = (INum)obj;
		if(this.num == p1.num)
		return true;
		return false;
	}
}



2. 아래에서 정렬이 이름 순으로 되게끔 하시오. Person 객체를 만드시오.


class ArrayObjSearch {
	public static void main(String[] args) {

		Person[] ar = new Person[3];    
		ar[0] = new Person("Lee", 29);
    ar[1] = new Person("Goo", 15);
    ar[2] = new Person("Soo", 37);

    Arrays.sort(ar);
	}
}



======================================================




class Person3 implements Comparable {
	private String name;
	private int age;
	
	public Person3(String name, int age) {
		this.name = name;
		this.age = age;
	}
	

	
	@Override
	public int compareTo(Object o) {
		Person3 p = (Person3)o; 
		return this.name.compareTo(p.name); // 음수,양수,0만 리턴해주면 되어 자기자신을 기준 - 오름차순, 상대방을 기준 - 내림차순
	}
	
	
	@Override
	public String toString() {
		return name + ": " + age;
	}
	
}




3.위의 문제에서 사람의 이름 글자 수가 많은 순으로 정렬을 되게끔 person 객체를 만드시오.




class Person2 implements Comparable {
	private String name;
	private int age;
	
	public Person2(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	@Override
	public int compareTo(Object o) {
		Person2 p = (Person2)o; 
		return  p.name.length() - this.name.length(); // 음수,양수,0만 리턴해주면 되어 자기자신을 기준 - 오름차순, 상대방을 기준 - 내림차순
	}
	
	@Override
	public String toString() {
		return name + ": " + age;
	}

}





4.아래의 문자열을 ":" 구분자로 하여, PM 08 45 를 차례로 출력하는 프로그램을 작성 하시오.
"PM:08:45"



public class Test4 {

	public static void main(String[] args) {
		StringTokenizer st1 = new StringTokenizer("PM:08:45", ":");

		while (st1.hasMoreTokens())
			System.out.print(st1.nextToken() + ' ');
		System.out.println();

	}
}



5. 아래를 넓이 순서대로 출력하게끔 하시오.

      Rectangle[] recArr = {new Rectangle(6, 6),new Rectangle(5, 5),new Rectangle(10, 10),new Rectangle(12, 12),new Rectangle(11, 11)};

      
      Arrays.sort(recArr);
      
      	      for ( Rectangle rec: recArr) {
	         System.out.println(rec.getArea());
	      }


==================================================================

class Rectangle implements Comparable {
	private int width, height;

	public Rectangle(int width, int height) {
		this.width = width;
		this.height = height;
	}


	public int getArea() {
		int result = width * height;
		return result;
	}
	
	@Override
	public int compareTo(Object o) {
		Rectangle p = (Rectangle)o; 
		return  p.getArea() - this.getArea(); // 음수,양수,0만 리턴해주면 되어 자기자신을 기준 - 오름차순, 상대방을 기준 - 내림차순
	}
}



6. html 에서
아래의 태그를 설명하시오.

-<br>
	- 행바꿈 태그
-<li>
	- 바깥쪽 리스트 태그
-<ol>
	- 오더리스트(1.2.3.4. 리스트) 태그 
-<ul>
	- 언오더리스트(● 리스트) 주로 메뉴 리스트 뽑을때 사용

