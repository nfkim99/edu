1. Maker 인터페이스에 대하여 설명하시오.
	- 클래스에 특정표시를 해두기 위한 목적
	- 마커 인터페이스라고 한다.
	- 구현해야 할 메소드가 없는 경우가 흔함.

2. 추상 클래스(abstract class)에 대하여 설명하시오.
	- 하나 이상의 추상 메소드를 지니는 클래스는 추상 클래스로 해줘야한다.
	- 추상클래스를 대상으로  하는 객체화는 불가능하다.
	- 자손이 추상함수를 구현해줘야한다.
	- 자식을 통해 다형성 호출할 수가 있다.

3.Exception 에 대하여 설명하시오.
	- 예외처리는 jvm이 던져준다.
	- 자바에서 에러가 나면 죽게된다.
	- 3.Exception 처리를 하면 에러가 나도 실행할수가 있게 된다.


4.에러를 내는 주체는?
	- JVM

5. 아래의 소스코드를 참고 하여 중에 Main안에 있는 두개의
getAllArea 과 getArea 함수를 완성하시오.
================================
interface AreaGetable {
	double getArea();

}

class Circle implements AreaGetable {
	private double r;

	public Circle(double r) {
		this.r = r;
	}

	@Override
	public double getArea() {

		return r * r * Math.PI;
	}
}

class Rectangle implements AreaGetable {

	private double width, height;

	public Rectangle(double width, double height) {
		this.height = height;
		this.width = width;
	}

	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		return width * height;
	}
}


class CondOp {
	public static void main(String[] args) {

		AreaGetable[] area = { new Rectangle(4, 5), new Circle(4), new Circle(4), new Circle(5), new Circle(5),
				new Circle(6) ,new Rectangle(4, 5),new Rectangle(4, 5),new Rectangle(4, 5),};

		// AreaGetable oneArea = new Circle(4);
		System.out.println(getAllArea(area));
		System.out.println(getArea(new Circle(10))); //314
		System.out.println(getArea(new Rectangle(4, 5))); //20

		// oneArea = new Rectangle(4,5);
		// System.out.println(area.getArea());

	}
}



======================================================

public static double getAllArea(AreaGetable[] area) {
		double sum = 0;
		
		for(int i = 0; i < area.length; i++) {
			sum += area[i].getArea();
		}
		
		return sum;

	}	


private static double getArea(AreaGetable area) {
		// TODO Auto-generated method stub
		return area.getArea();
	}


6. 아래의 결과를 나타내는 사칙연산 계산기를 완성하시오.
-주의 잘못된 입력이 있으면 처음부터 다시 입력을 받도록 
예외처리 구문(try catch)을 넣을것


*** 계산기 ***
수1 : 10
수2 : 20
연산 : +
계산 결과 : 30
계속 하시겠습니까? 계속 : Y , 종료 : N
y
*** 계산기 ***
수1 : R
잘못된 입력입니다. 다시입력해 주세요
*** 계산기 ***
수1 : 10
수2 : 20
연산 : *
계산 결과 : 200
계속 하시겠습니까? 계속 : Y , 종료 : N
y
*** 계산기 ***
수1 : 90
수2 : 80
연산 : /
계산 결과 : 1
계속 하시겠습니까? 계속 : Y , 종료 : N
n
종료입니다.





==============================================================

public static void main(String[] args) {
		
		System.out.println("**********계산기**********");
		Scanner sc = new Scanner(System.in);
		while (true) {
			try {
				System.out.print("수1 : ");
				int num1 = sc.nextInt();
				
				System.out.print("수2 : ");
				int num2 = sc.nextInt();
				
				System.out.print("연산 : ");
				String ch = sc.next();
				
				
				if(ch.equals("+")) {
					int sum = num1 + num2;
					System.out.println("계산결과 : " + sum);
				} else if(ch.equals("-")) {
					int sum = num2 - num1;
					System.out.println("계산결과 : " + sum);
				} else if(ch.equals("*")) {
					int sum = num1 * num2;
					System.out.println("계산결과 : " + sum);
				} else if(ch.equals("/")) {
					int sum = num1 / num2;
					System.out.println("계산결과 : " + sum);
				} else if(ch.equals("%")) {
					int sum = num1 % num2;
					System.out.println("계산결과 : " + sum);
				} else {
					System.out.println("잘못된 연산기호 입니다.");
				}
				System.out.println("계속 하시겠습니까? 계속 Y :: 중단 N");

			} catch (Exception e) {
				System.out.println("잘못된 입력입니다. 다시 입력해 주세요");
			}

			
			char ch2 = sc.next().charAt(0); // 문자열을 받고 그중 1번째 문자를 받겟다.

			if (ch2 == 'N' || ch2 == 'n')
				break;
		}
		System.out.println("종료 입니다.");
	}

}