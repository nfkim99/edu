1.메소드 오버로딩에 대하여 설명하시오.
	- 같은 함수이름으로 여러 개의 함수를 만드는 것.
	- 같은 함수명의 파라미터의 type 또는 갯수를 달리 하는 것.
	- 컴파일러 에서는 다른 함수로 취급.

2.메소드 오버로딩을 적용한 대표적인 함수는?
	-println : 가장 대표적인 함수 오버로딩 이다.

3.this 함수에 대하여 설명하시오.
	- 자기자신의 인스턴스 함수를 호출한다.
	- 포인터
	- 생성자

4.this 의 용도는?
	- 2가지 용도
	- 포인터
	- 생성자


5.스트링 객체를 생성하는 2가지 방법은 무엇인가?

	String str1 = "Simple String"; 
	String str2 = "Simple String";


	String str3 = new String("Simple String");
	String str4 = new String("Simple String");


6. 아래의 결과를 예측하고,이유를 설명하시오.

String str1 = "Simple String"; 
String str2 = "Simple String";


String str3 = new String("Simple String");
String str4 = new String("Simple String");

//참조변수의 참조 값 비교
if(str1 == str2)
   System.out.println("str1과 str2는 동일 인스턴스 참조");
else
   System.out.println("str1과 str2는 다른 인스턴스 참조");

//참조변수의 참조 값 비교
if(str3 == str4)
   System.out.println("str3과 str4는 동일 인스턴스 참조");
else
   System.out.println("str3과 str4는 다른 인스턴스 참조");


	1. str1과 str2는 동일한 메모리 주소(2000번지)를 참조하여 동일 인스턴스 참조를 출력.
		- 안에 내용을(주소값을 비교) 비교해서 메모리에 한개만 올라간다. 2000번지

	2. str3과 str4는 객체 생성 new 는 무조건 메모리에 하나를 올린다. 
		- 객체 생성 2000번지.
		- 객체 생성 3000번지.


7.imutable 에 대하여 설명하시오.

	String str1 = "Simple String"; 
	String str2 = "Simple String";


	String str5 = str1 + str2; // 원본 보전 (Immutable) String 연산은 원본을 보전

		Simple String + Simple String

		Simple StringSimple String

	str1과str2의 원본값은 건드리지않고,

	str1과 str2 복사후 + 연산하여 따로 메모리에 올린다.

		Simple StringSimple String


8.사용자로부터 받은 문자열(영문으로)에서 자음과 모음 개수를 계산하는 프로그램을 작성
입력:abcd 
출력:

총글자수는 4개
자음:3 개
모음:1 개



9.사용자에게 받은 문자열을 역순으로 화면에 출력하는 프로그램을 작성하시오.
입력:abcde
출력:edcba

		public static void main(String[] args) {
		// ABCD 입력
		// DCBA 출력
		
		Scanner sc = new Scanner(System.in);

		String str = sc.next();
		
		for(int i = str.length() -1; i >= 0; i--) {
			System.out.print(str.charAt(i));
		}
	}

}



10.사용자로부터 키를 입력 받아서 표준 체중을 계산한 후에 사용자의 체중과 비교하여 
저체중인지, 표준 인지, 과체중인지를 판단하는 프로그램을 작성하라. 
표준 체중 계산식은 다음을 사용하라.
표준체중(kg) = ( 키(cm) - 100 ) * 0.9

입력:
키(cm)를 입력하세요. : 193
체중(kg)을 입력하세요. : 25
출력:
표준 체중은 83.7입니다.
당신은 저체중 입니다. 


package edu.kosmo.ex.rsp;
public class Mybalance {
	int tall;
	int kg;

	
	public Mybalance(int tall, int kg) { // 생성자. 생성자는 클래스명과 같다.
		this.tall = tall;
		this.kg = kg;
	}
	
	public double balance() { // 평균 함수
		double result = ( tall - 100 ) * 0.9;
		System.out.println("표준 체중은 " + result + "입니다.");
		return result;
	}
	
	public String getGrade() {
		double avg = balance();
		String str;
		
		if(avg <= 85) {
			str = "당신은 저 체중 입니다.";
			System.out.println(str);
		} else if(avg >= 90){
			str = "당신은 표준 체중 입니다.";
			System.out.println(str);
		} else {
			str = "당신은 고 체중 입니다.";
			System.out.println(str);
		}
		return str;
	}
}


public static void main(String[] args) {
		/*
		 * 
		 * 10.사용자로부터 키를 입력 받아서 표준 체중을 계산한 후에 사용자의 체중과 비교하여 
			저체중인지, 표준 인지, 과체중인지를 판단하는 프로그램을 작성하라. 
			표준 체중 계산식은 다음을 사용하라.
			표준체중(kg) = ( 키(cm) - 100 ) * 0.9
			입력:
			키(cm)를 입력하세요. : 193
			체중(kg)을 입력하세요. : 25
			출력:
			표준 체중은 83.7입니다.
			당신은 저체중 입니다. 
		 * 
		 * 
		 */
		
		Scanner sc = new Scanner(System.in);

		int tall = sc.nextInt();
		int kg = sc.nextInt();
		System.out.println("키(cm)를 입력하세요. : " + tall);
		System.out.println("체중(kg)을 입력하세요. : " + kg);
		
		//double result = (tall - 100) * 0.9;
		
		
		Mybalance mb = new Mybalance(tall, kg);
		//mb.balance();
		mb.getGrade();
		
		
		
		
	}

}
