1. 아래의 출력이 나오도록 만드시오.

public class HashPerson {
	public static void main(String[] args) {
		HashSet<Person> hSet = new HashSet<Person>();
		
		hSet.add(new Person("LEE", 10));
		hSet.add(new Person("LEE", 10));
		hSet.add(new Person("PARK", 35));
		hSet.add(new Person("PARK", 35));

		System.out.println("저장된 데이터 수: " + hSet.size());
		//System.out.println(hSet);
	}
}

/*
저장된 데이터 수: 2
[LEE(10세), PARK(35세)]
*/

==================================================

class Person {
	private String name;
	private int age;
	
	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	@Override
	public String toString() {
		return name + "(" + age + "세)";
	}
	

	@Override
	public int hashCode() {	
		return age % 3;
	}


	@Override
	public boolean equals(Object obj) { 
		
		if(obj instanceof Person) {
			Person person = (Person) obj;
			if(person.name.equals(this.name) && this.age == person.age)
				return true;
		}
			return false;
	}
}

2. 아래와 같이 출력이 나오도록 프로그래밍을 하시오.

        HashSet<Num> set = new HashSet<>();
        set.add(new Num(7799));
        set.add(new Num(9955));
        set.add(new Num(7799));

        System.out.println("인스턴스 수: " + set.size());

        for(Num n : set)
            System.out.print(n.toString() + '\t');

        System.out.println();

/*
====출력
인스턴스 수: 2
7799	9955
*/




class Num {
	private int num;
	
	public Num(int n) {
		num = n;
	}
	
	@Override
	public String toString() {
		return String.valueOf(num);
	}
	
	// 1. set은 기본적으로 hashCode() - 해시 알고리즘 - 분류한다(속도)
	// 오버라이딩을 안할경우 객체가 생성될떄마다 주소가 생성된다. 2000번지, 3000번지, 4000번지
	// 그래서 오버라이딩 안하면 객체 생성될떄마다 군집을 만든다.
	
	@Override
	public int hashCode() {	// 속도를 위한 알고리즘 - 속도관련 분류이기 떄문에 동등한걸 찾지는 않는다.
		return num % 3;
	}

	
	// 2. 동등 비교를 위해 - true면 동등 false면 다름 : 이로직은 개발자가 짬
	@Override
	public boolean equals(Object obj) { // 동등비교 - 실질적으로 set은 equals 오버라이딩에 의해 동등한걸 찾는다.
		if(num == ((Num)obj).num) {
			return true;
		} else
			return false;
	}
}


3.ThreeSet 과 HashSet 의 차이는?

HashSet
	- 해쉬는 탐색의 속도를 위해 분류해 놓은거
	- 해쉬코드는 1차적으로 객체의 주소값의 암호주소(짜가주소)이다.
	- 해쉬 = 데이터의 분류(속도)

TreeSet
	- TreeSet은 트리형식의 정렬이 된다.
	- 트리(Tree) 자료구조를 기반으로 인스턴스를 저장
	- 정렬 상태가 유지되면서 인스턴스가 저장된다.	


4.하나의 학생 정보를 나타내는 Student 클래스에는 이름, 학과, 학번, 학점 평균을 저장하는 필드가 있다.

(1) 학생마다 Student 객체를 생성하고 4명의 학생 정보를 ArrayList<Student> 컬렉션에 저장한 후에, ArrayList<Student>의 모든 학생(4명) 정보를 출력하고 학생 이름을 입력받아 해당 학생의 학점 평균을 출력하는 프로그램을 작성하라.

학생 이름, 학과, 학번, 학점평균 입력하세요.

>> 황기태, 모바일, 1, 4.1
>> 이재문, 안드로이드, 2, 3.9
>> 김남윤, 웹공학, 3, 3.5
>> 최찬미, 빅데이터, 4, 4.25

----------------------------------

이름: 황기태

학과: 모바일

학번: 1

학점평균: 4.1

----------------------------------

이름: 이재문

학과: 안드로이드

학번: 2

학점평균: 3.9

----------------------------------

이름: 김남윤

학과: 웹공학

학번: 3

학점평균: 3.5

----------------------------------

이름: 최찬미

학과: 빅데이터

학번: 4

학점평균: 4.25

----------------------------------

학생 이름 >> 최찬미

최찬미, 빅데이터, 4, 4.25

학생 이름 >> 이재문

이재문, 안드로이드, 2, 3.9

학생 이름 >> 그만
====================================================

5. 개별 진척도 오늘 못한거 정리 해 주세요.








